name: Conditional Workflow

on:
  push:

jobs:
  main-branch-job:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (Using Temurin distribution)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the project using Maven (create JAR file)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 5: Verify the target directory (Debugging Step)
      - name: Verify target directory
        run: ls -l target

      # Step 6: List build context for Docker (Debugging Step)
      - name: List build context
        run: |
          ls -l
          ls -l target

      # Step 7: Log in to GitHub Container Registry using Personal Access Token (PAT)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Step 8: Build Docker image
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/hello-api:latest .

      # Step 9: Push Docker image to GHCR
      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository_owner }}/hello-api:latest

      - name: Run main branch tasks
        run: echo "Running workflow for main branch."

  other-branches-job:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
       # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (using the Temurin distribution)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Confirm Java version is 17
      - name: Check Java version
        run: java -version

      # Step 4: Build with Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Step 5: Run tests with JaCoCo
      - name: Run tests with JaCoCo
        run: mvn org.jacoco:jacoco-maven-plugin:0.8.10:prepare-agent test

      # Step 6: Generate code coverage report using JaCoCo
      - name: Generate code coverage report
        run: mvn org.jacoco:jacoco-maven-plugin:0.8.10:report
        
      # Step 7: Printing Code coverage in percentage
      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Printing Code coverage in percentage
        run: |
          coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml)
          missed=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml)
          total=$(($coverage + $missed))
          percentage=$(echo "scale=2; $coverage*100/$total" | bc)
          echo "Code coverage: $percentage%"
    
      # Step 8: coverage threshold 
      - name: Enforce code coverage threshold
        run: |
         if (( $(echo "$percentage < 80" | bc -l) )); then
         echo "Code coverage is below 80%. Failing the workflow."
         exit 1
         fi

      # Step 9: Conclusion       
      - name: Run tasks for other branches successfully
        run: echo "Running workflow for non-main branch."
